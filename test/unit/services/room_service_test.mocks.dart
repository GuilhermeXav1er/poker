// Mocks generated by Mockito 5.4.6 from annotations
// in poker/test/unit/services/room_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:poker/models/room_models.dart' as _i2;
import 'package:poker/repositories/room_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCreateRoomResponse_0 extends _i1.SmartFake
    implements _i2.CreateRoomResponse {
  _FakeCreateRoomResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJoinRoomResponse_1 extends _i1.SmartFake
    implements _i2.JoinRoomResponse {
  _FakeJoinRoomResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RoomRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoomRepository extends _i1.Mock implements _i3.RoomRepository {
  MockRoomRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.CreateRoomResponse> createRoom(
          _i2.CreateRoomRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRoom,
          [request],
        ),
        returnValue:
            _i4.Future<_i2.CreateRoomResponse>.value(_FakeCreateRoomResponse_0(
          this,
          Invocation.method(
            #createRoom,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.CreateRoomResponse>);

  @override
  _i4.Future<_i2.JoinRoomResponse> joinRoom(
    String? roomId,
    _i2.JoinRoomRequest? request,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinRoom,
          [
            roomId,
            request,
          ],
        ),
        returnValue:
            _i4.Future<_i2.JoinRoomResponse>.value(_FakeJoinRoomResponse_1(
          this,
          Invocation.method(
            #joinRoom,
            [
              roomId,
              request,
            ],
          ),
        )),
      ) as _i4.Future<_i2.JoinRoomResponse>);

  @override
  _i4.Future<void> startGame(String? roomId) => (super.noSuchMethod(
        Invocation.method(
          #startGame,
          [roomId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  String getWebSocketUrl(String? roomId) => (super.noSuchMethod(
        Invocation.method(
          #getWebSocketUrl,
          [roomId],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getWebSocketUrl,
            [roomId],
          ),
        ),
      ) as String);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
